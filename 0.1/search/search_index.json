{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenAI is a Dyalog APL namespace that contains code to interact with the OpenAI API . OpenAI develops and maintains several Large Language Models (LLMs). OpenAI contains code to interact with OpenAI endpoints. A few things to note: We are going to use the term \"OpenAI\" a lot in this documentation. When formatted as OpenAI , we are referring to the Dyalog namespace which implements an interface to the OpenAI API. When formatted as OpenAI, we are referring to the OpenAI API itself. ChatGPT is actively developing OpenAI, adding new LLMs and endpoint definitions. This puts us in a reactive mode to incorporate these new features and interfaces. We anticipate Not all OpenAI endpoints are currently implemented in OpenAI . This is partly due to the reason stated above. Our goal is to have sufficient endpoint coverage that our users can perform useful tasks with OpenAI from APL. There are other LLMs available - OpenAI should serve as a good model for how to implement interfaces to them. In particular, OpenAI makes heavy use of HttpCommand and the techniques used should be applicable for interacting with other LLM APIs. This documentation presents information on how to use the OpenAI namespace to interact with the OpenAI endpoints. It does not attempt to document all of the features and nuances of those endpoints. For that information, please see the OpenAI API Reference . We encourage feedback, feature requests, and guidance from our users. Endpoints Currently Implemented Audio - turn audio into text or text into audio Chat - have a conversation with an OpenAI model Files - upload and manage documents that can be used with other features Image - given a prompt or existing image, generate a new image Models - list and describe the various models available in the OpenAI API Moderations - Classify text input as potentially harmful Forthcoming Endpoints Expected in October 2024 OpenAI has released, in beta, version 2 of their Assistants and related endpoints. We expect to have completed their development in OpenAI in October 2024. Assistants - Build assistants that can call models and use tools to perform tasks. Threads - Create threads that assistants can interact with. Messages - Create messages within threads. Runs - Represents an execution on a thread. Vector Stores - Used to store files for use be the OpenAI's file_search tool. Vector Store Files - Represent files inside a vector store. Future Beyond October 2024, we expect to add support for the following endpoints. Vector Store File Batches - Represent operations to add multiple files to a vector store. Run Steps - Represents the steps (model and tool calls) taken during the run. Uploads - Upload large files in multiple parts. Embeddings - Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms. Other future work may include Projects and Users endpoints depending on our users' needs.","title":"Overview"},{"location":"#endpoints-currently-implemented","text":"Audio - turn audio into text or text into audio Chat - have a conversation with an OpenAI model Files - upload and manage documents that can be used with other features Image - given a prompt or existing image, generate a new image Models - list and describe the various models available in the OpenAI API Moderations - Classify text input as potentially harmful","title":"Endpoints Currently Implemented"},{"location":"#forthcoming-endpoints","text":"","title":"Forthcoming Endpoints"},{"location":"#expected-in-october-2024","text":"OpenAI has released, in beta, version 2 of their Assistants and related endpoints. We expect to have completed their development in OpenAI in October 2024. Assistants - Build assistants that can call models and use tools to perform tasks. Threads - Create threads that assistants can interact with. Messages - Create messages within threads. Runs - Represents an execution on a thread. Vector Stores - Used to store files for use be the OpenAI's file_search tool. Vector Store Files - Represent files inside a vector store.","title":"Expected in October 2024"},{"location":"#future","text":"Beyond October 2024, we expect to add support for the following endpoints. Vector Store File Batches - Represent operations to add multiple files to a vector store. Run Steps - Represents the steps (model and tool calls) taken during the run. Uploads - Upload large files in multiple parts. Embeddings - Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms. Other future work may include Projects and Users endpoints depending on our users' needs.","title":"Future"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2024 Dyalog Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"audio/","text":"Pending publication","title":"Audio Endpoint"},{"location":"chat/","text":"Pending publication","title":"Chat Endpoint"},{"location":"files/","text":"Pending publication","title":"Files Endpoint"},{"location":"image/","text":"Pending publication","title":"Image Endpoint"},{"location":"models/","text":"Pending publication","title":"Models Endpoint"},{"location":"moderations/","text":"Pending publication","title":"Moderations Endpoint"},{"location":"release-notes/","text":"Version 0.1 This is the initial release of OpenAI . It implements interfaces to the following OpenAI endpoints: audio, chat, files, image, models, and moderations. Additional interfaces to other OpenAI endpoints will be available in future releases.","title":"Release Notes"},{"location":"release-notes/#version-01","text":"This is the initial release of OpenAI . It implements interfaces to the following OpenAI endpoints: audio, chat, files, image, models, and moderations. Additional interfaces to other OpenAI endpoints will be available in future releases.","title":"Version 0.1"},{"location":"userguide/","text":"Getting Started Register and Create an OpenAI Project To use OpenAI API, you will need to: Create an account with OpenAI . Provide billing/payment information. Create a project Create one or more project API key(s). You will need a project API key to be able to access the OpenAI API via OpenAI . Protect this API key, do not publish it in GitHub or other public places. Obtain OpenAI Download OpenAI.apln from GitHub. Configure OpenAI You will need to provide the API key you created earlier. OpenAI.APIKey\u2190'your-API-key-here' You may not want to include your API key in your code that initializes OpenAI . One technique to avoid this is to store your APIKey in an environment variable and then retrieve its value. OpenAI.APIKey\u21902 \u2395NQ # 'GetEnvironment' 'your-APIKey-environment-variable-name' OpenAI Initialization OpenAI makes heavy use of HttpCommand and requires HttpCommand version 5.6 or later. During initialization, OpenAI will look for HttpCommand in its parent namespace and if it doesn't find HttpCommand it will load it from your Dyalog installation and then upgrade to the latest version of HttpCommand. The endpoints implemented in OpenAI will initialize OpenAI if not already initialized. You can also initialize OpenAI by running OpenAI.Initialize . In a production environment, HttpCommand should be copied and saved into the workspace rather than relying on loading and upgrading. OpenAI Naming Conventions Each of the endpoints implemented in OpenAI has a number of parameters. Parameters beginning with a lower-case letter (a-z) are parameters that OpenAI itself uses. Parameters beginning with an upper-case letter (A-Z) are parameters used by OpenAI to make it easier to use in an APL environment. Endpoints Most endpoints, when run, will save the last HttpCommand response namespace in the Response variable for the endpoint. This can be used to access the result of the endpoint's execution or to examine in case the execution failed. For example: s\u2190OpenAI.Audio.Speech 'This is a test' s.Run [rc: 0 | msg: | HTTP Status: 401 \"Unauthorized\" | \u2262Data: 1 (namespace)] s.Show \u235d show Response.Data { \"error\": { \"code\": null, \"message\": \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", \"param\": null, \"type\": \"invalid_request_error\" } } Important Remember to set OpenAI.APIKey prior to running any endpoints.","title":"Using OpenAI"},{"location":"userguide/#getting-started","text":"","title":"Getting Started"},{"location":"userguide/#register-and-create-an-openai-project","text":"To use OpenAI API, you will need to: Create an account with OpenAI . Provide billing/payment information. Create a project Create one or more project API key(s). You will need a project API key to be able to access the OpenAI API via OpenAI . Protect this API key, do not publish it in GitHub or other public places.","title":"Register and Create an OpenAI Project"},{"location":"userguide/#obtain-openai","text":"Download OpenAI.apln from GitHub.","title":"Obtain OpenAI"},{"location":"userguide/#configure-openai","text":"You will need to provide the API key you created earlier. OpenAI.APIKey\u2190'your-API-key-here' You may not want to include your API key in your code that initializes OpenAI . One technique to avoid this is to store your APIKey in an environment variable and then retrieve its value. OpenAI.APIKey\u21902 \u2395NQ # 'GetEnvironment' 'your-APIKey-environment-variable-name'","title":"Configure OpenAI"},{"location":"userguide/#openai-initialization","text":"OpenAI makes heavy use of HttpCommand and requires HttpCommand version 5.6 or later. During initialization, OpenAI will look for HttpCommand in its parent namespace and if it doesn't find HttpCommand it will load it from your Dyalog installation and then upgrade to the latest version of HttpCommand. The endpoints implemented in OpenAI will initialize OpenAI if not already initialized. You can also initialize OpenAI by running OpenAI.Initialize . In a production environment, HttpCommand should be copied and saved into the workspace rather than relying on loading and upgrading.","title":"OpenAI Initialization"},{"location":"userguide/#openai-naming-conventions","text":"Each of the endpoints implemented in OpenAI has a number of parameters. Parameters beginning with a lower-case letter (a-z) are parameters that OpenAI itself uses. Parameters beginning with an upper-case letter (A-Z) are parameters used by OpenAI to make it easier to use in an APL environment.","title":"OpenAI Naming Conventions"},{"location":"userguide/#endpoints","text":"Most endpoints, when run, will save the last HttpCommand response namespace in the Response variable for the endpoint. This can be used to access the result of the endpoint's execution or to examine in case the execution failed. For example: s\u2190OpenAI.Audio.Speech 'This is a test' s.Run [rc: 0 | msg: | HTTP Status: 401 \"Unauthorized\" | \u2262Data: 1 (namespace)] s.Show \u235d show Response.Data { \"error\": { \"code\": null, \"message\": \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", \"param\": null, \"type\": \"invalid_request_error\" } } Important Remember to set OpenAI.APIKey prior to running any endpoints.","title":"Endpoints"}]}